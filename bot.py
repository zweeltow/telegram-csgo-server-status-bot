# -*- coding: utf-8 -*-

import logging

import telebot
from telebot import types

import config
import strings
import timer
from valve_api import ValveServersAPI, ValveServersDataCentersAPI


TEST = False

if TEST: bot = telebot.TeleBot(config.TESTBOT) # token of the test bot
else: bot = telebot.TeleBot(config.CSGOBETABOT) # token of the bot
telebot.logger.setLevel(logging.DEBUG) # setup logger
me = config.OWNER # short way to dialog with me
api = ValveServersAPI()
api_dc = ValveServersDataCentersAPI()
timer = Timer()


"""Setup keyboard"""
# English
markup_en = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
Status = types.KeyboardButton('Status')
Matchmaking = types.KeyboardButton('Matchmaking')
Devcount = types.KeyboardButton('Online Devs')
DC = types.KeyboardButton('Data Centers')
markup_en.add(Status, Matchmaking, Devcount, DC)

# DC
markup_DC = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
Europe = types.KeyboardButton('Europe')
Asia = types.KeyboardButton('Asia')
South_Africa = types.KeyboardButton('South Africa')
South_America = types.KeyboardButton('South America')
Australia = types.KeyboardButton('Australia')
USA =  types.KeyboardButton('USA')
Back_button = types.KeyboardButton('‚è™ Back')
markup_DC.add(Asia, Australia, Europe, South_Africa, South_America, USA, Back_button)

# DC Asia
markup_DC_Asia = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
India = types.KeyboardButton('India')
Emirates = types.KeyboardButton('Emirates')
China = types.KeyboardButton('China')
Singapore = types.KeyboardButton('Singapore')
Hong_Kong = types.KeyboardButton('Hong Kong')
Japan = types.KeyboardButton('Japan')
markup_DC_Asia.add(China, Emirates, Hong_Kong, India, Japan, Singapore)

# DC Europe
markup_DC_EU = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
EU_West = types.KeyboardButton('EU West')
EU_East = types.KeyboardButton('EU East')
EU_North = types.KeyboardButton('EU North')
markup_DC_EU.add(EU_East, EU_North, EU_West)

# DC USA
markup_DC_USA = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
USA_Northwest = types.KeyboardButton('USA North')
USA_Southwest = types.KeyboardButton('USA South')
markup_DC_USA.add(USA_Northwest, USA_Southwest)

# DC Back
markup_DC_Back = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
Back_button = types.KeyboardButton('‚è™ Back')
markup_DC_Back.add(Back_button)

# Russian
markup_ru = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
Status_ru = types.KeyboardButton('–°—Ç–∞—Ç—É—Å')
Matchmaking_ru = types.KeyboardButton('–ú–∞—Ç—á–º–µ–π–∫–∏–Ω–≥')
Devcount_ru = types.KeyboardButton('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –∏–≥—Ä–µ')
DC_ru = types.KeyboardButton('–î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä—ã (–ê–Ω–≥–ª.)')
markup_ru.add(Status_ru, Matchmaking_ru, Devcount_ru, DC_ru)

# DC RU
# markup_DC_ru = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
# Europe_ru = types.KeyboardButton('–ï–≤—Ä–æ–ø–∞')
# Asia_ru = types.KeyboardButton('–ê–∑–∏—è')
# Africa_ru = types.KeyboardButton('–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞')
# South_America_ru = types.KeyboardButton('–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞')
# Australia_ru = types.KeyboardButton('–ê–≤—Å—Ç—Ä–∞–ª–∏—è') 
# USA_ru =  types.KeyboardButton('–°–®–ê')
# Back_button_ru = types.KeyboardButton('‚è™ –ù–∞–∑–∞–¥')
# markup_DC_ru.add(Australia_ru, Asia_ru, Europe_ru, USA_ru, South_America_ru, Africa_ru, Back_button_ru)

"""Delete Keyboard"""
markup_del = types.ReplyKeyboardRemove(False)


def log(message):
    """The bot send messages to log channel"""
    bot.send_message(config.LOGCHANNEL, message)

#    if message.from_user.last_name == None:
#        text = f'[<a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>] {message.from_user.first_name} "{message.from_user.username}": {message.text}'
#    else:
#        text = log_message = f'[<a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>] {message.from_user.first_name} "{message.from_user.username}" {message.from_user.last_name}: {message.text}'
    
#    bot.send_message(config.OWNER, text, disable_web_page_preview=None, 
#                     reply_to_message_id=None, reply_markup=None, parse_mode='html', disable_notification=True)


def log_inline(inline_query):
    # bot.send_message(config.OWNER, f'[<a href="tg://user?id={inline_query.from_user.id}">{inline_query.from_user.id}</a>] {inline_query.from_user.first_name} "{inline_query.from_user.username}" {inline_query.from_user.last_name} used <b>inline</b>', parse_mode='html', disable_notification=True)
    bot.send_message(config.LOGCHANNEL, inline_query)

def send_about_problem_valve_api(message):
    """Answer of bot if Valve's API don't answer"""
    
    if message.from_user.language_code == "ru":
        text = strings.wrongAPI_ru
    else:
        text = strings.wrongAPI_en

    bot.send_message(message.chat.id, text)


def send_about_problem_valve_inline(inline_query):
    # if inline_query.from_user.language_code == "ru":
    #     bot.send_message(message.chat.id, 'üíÄ –ü—Ä–æ–±–ª–µ–º—ã —Å API Valve, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    # else:
    #     bot.send_message(message.chat.id, "üíÄ Issues with Valve's API, the bot can't get information, please, try again later.")
    try:
        r = types.InlineQueryResultArticle('1', "üíÄ Issues with Valve's API, try again later", input_message_content = "üíÄ Issues with Valve's API, the bot can't get information, please, try again later.\n\n‚ù§Ô∏è @csgobetabot", description="The bot can't get information about servers")
        bot.answer_inline_query(inline_query.id, [r])

    except Exception as e:
        bot.send_message(config.OWNER, f'‚ùóÔ∏èError: {e}\n\ninline_query')
        print(e)


def status(message):
    """Get the status of CS:GO servers"""
    try:
        SessionsLogon, player_count, time_server = api.status()
        if SessionsLogon == 'normal':
            if message.from_user.language_code == 'ru':
                text = strings.statusNormal_ru.format(player_count, time_server)
                markup = markup_ru
            else:    
                text = strings.statusNormal_en.format(player_count, time_server)
                markup = markup_en
        else:
            if message.from_user.language_code == 'ru':
                text = strings.statusWrong_ru.format(time_server)
                markup = markup_ru
            else:
                text = strings.statusWrong_en.format(time_server)
                markup = markup_en

        bot.send_message(message.chat.id, text, reply_markup=markup) 
    except Exception as e:
        bot.send_message(me, f'‚ùóÔ∏è{e}')
        send_about_problem_valve_api(message)


def matchmaking(message):
    """Get information about online servers, active players and more about matchmaking servers"""
    try:
        scheduler, online_servers, online_players, time_server, search_seconds_avg, searching_players = api.matchmaking()
        if scheduler == 'normal':
            if message.from_user.language_code == 'ru':
                text = strings.mmNormal_ru.format(online_servers, online_players, searching_players, search_seconds_avg, time_server)
                markup = markup_ru
            else:
                text = strings.mmNormal_en.format(online_servers, online_players, searching_players, search_seconds_avg, time_server)
                markup = markup_en
        elif not scheduler == 'normal':
            if message.from_user.language_code == 'ru':
                text = strings.mmWrong_ru.format(time_server)
                markup = markup_ru
            else:
                text = strings.mmWrong_en.format(time_server)
                markup = markup_en
    
        bot.send_message(message.chat.id, text, reply_markup=markup)
    except Exception as e:
        bot.send_message(me, f'‚ùóÔ∏è{e}')
        send_about_problem_valve_api(message)


def devcount(message):
    """Get the count of online devs"""
    try:
        dev_player_count, time_server = api.devcount()
        if message.from_user.language_code == 'ru':
                text = strings.devCount_ru.format(dev_player_count, time_server)
                markup = markup_ru
        else:    
                text = strings.devCount_en.format(dev_player_count, time_server)
                markup = markup_en

        bot.send_message(message.chat.id, text, reply_markup=markup) 
    except Exception as e:
        bot.send_message(me, f'‚ùóÔ∏è{e}')
        send_about_problem_valve_api(message)
        

def timer(message):
    """Get the count of online devs"""
    try:
        delta_days, delta_hours, delta_mins, delta_secs = timer()
        if message.from_user.language_code == 'ru':
                text = strings.timer_ru.format(delta_days, delta_hours, delta_mins, delta_secs)
                markup = markup_ru
        else:    
                text = strings.timer_en.format(delta_days, delta_hours, delta_mins, delta_secs)
                markup = markup_en

        bot.send_message(message.chat.id, text, reply_markup=markup) 
        

def dc(message):
    try:
        if message.from_user.language_code == 'ru':
            text = 'üì∂ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–µ–≥–∏–æ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä–∞—Ö (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):'
            markup = markup_DC
        else:
            text = 'üì∂ Select the region you are interested in, to get information about the data centers:'
            markup = markup_DC
        
        bot.send_message(message.chat.id, text, reply_markup=markup)

    except Exception as e:
        bot.send_message(me, f'‚ùóÔ∏è{e}')
        send_about_problem_valve_api(message)


def dc_africa(message):
    capacity, load, time_server = api_dc.africa_South()
    text = f'üáøüá¶ South Africa ºs DC status is OK:\n\n‚Ä¢ Location: Johannesburg;\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text)


def dc_australia(message):
    capacity, load, time_server = api_dc.australia()
    text = f'üá¶üá∫ Australia ºs DC status is OK:\n\n‚Ä¢ Location: Sydney;\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text)


def dc_europe(message):
    text = 'üìç Specify the region...'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC_EU)


def dc_eu_north(message):
    capacity, load, time_server = api_dc.eu_North()
    text = f'üá∏üá™ Sweden ºs DC status is OK:\n\n‚Ä¢ Location: Stockholm;\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_eu_west(message):
    capacity, load, capacity_Spain, load_Spain, time_server = api_dc.eu_West()
    text = f'üá±üá∫ Luxembourg ºs DC status is OK:\n\n‚Ä¢ Location: Luxembourg;\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nüá™üá∏ Spain ºs DC status is OK:\n\n‚Ä¢ Location: Mardid;\n‚Ä¢ Load: {load_Spain};\n‚Ä¢ Capacity: {capacity_Spain}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_eu_east(message):
    capacity_East, capacity_Poland, load_East, load_Poland, time_server = api_dc.eu_East()
    text = f'üá¶üáπ Austria ºs DC status is OK:\n\n‚Ä¢ Location: Vienna;\n‚Ä¢ Load: {load_East};\n‚Ä¢ Capacity: {capacity_East}.\n\nüáµüá± Poland ºs DC status is OK:\n\n‚Ä¢ Location: Warsaw;\n‚Ä¢ Load: {load_Poland};\n‚Ä¢ Capacity: {capacity_Poland}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_asia(message):
    text = 'üìç Specify the country...'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC_Asia)


def dc_usa(message):
    text = 'üìç Specify the region...'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC_USA)


def dc_usa_north(message):
    capacity_US_Northcentral, capacity_US_Northeast, capacity_US_Northwest, load_US_Northcentral, load_US_Northeast, load_US_Northwest, time_server = api_dc.usa_North()
    text = f'üá∫üá∏ Northcentral DC status is OK:\n\n‚Ä¢ Location: Chicago;\n‚Ä¢ Load: {load_US_Northcentral};\n‚Ä¢ Capacity: {capacity_US_Northcentral}.\n\nüá∫üá∏ Northeast DC status is OK:\n\n‚Ä¢ Location: Sterling;\n‚Ä¢ Load: {load_US_Northeast};\n‚Ä¢ Capacity: {capacity_US_Northeast}.\n\nüá∫üá∏ Northwest DC status is OK:\n\n‚Ä¢ Location: Moses Lake;\n‚Ä¢ Load: {load_US_Northwest};\n‚Ä¢ Capacity: {capacity_US_Northwest}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_usa_south(message):
    capacity_US_Southeast, capacity_US_Southwest, load_US_Southeast, load_US_Southwest, time_server = api_dc.usa_South()
    text = f'üá∫üá∏ Southwest DC status is OK:\n\n‚Ä¢ Location: Los Angeles;\n‚Ä¢ Load: {load_US_Southwest};\n‚Ä¢ Capacity: {capacity_US_Southwest}.\n\nüá∫üá∏ Southeast DC status is OK:\n\n‚Ä¢ Location: Atlanta;\n‚Ä¢ Load: {load_US_Southeast};\n‚Ä¢ Capacity: {capacity_US_Southeast}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_south_america(message):
    capacity_Chile, capacity_Peru, capacity_Brazil, load_Chile, load_Peru, load_Brazil, time_server = api_dc.sa()
    text = f'üáßüá∑ Brazil ºs DC status is OK:\n\n‚Ä¢ Location: Sao Paulo;\n‚Ä¢ Load: {load_Brazil};\n‚Ä¢ Capacity: {capacity_Brazil}.\n\nüá®üá± Chile ºs DC status is OK:\n\n‚Ä¢ Location: Santiago;\n‚Ä¢ Load: {load_Chile};\n‚Ä¢ Capacity: {capacity_Chile}.\n\nüáµüá™ Peru ºs DC status is OK:\n\n‚Ä¢ Location: Lima;\n‚Ä¢ Load: {load_Peru};\n‚Ä¢ Capacity: {capacity_Peru}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_india(message):
    capacity, capacity_East, load, load_East, time_server = api_dc.india()
    text = f'üáÆüá≥ India ºs DC status is OK:\n\n‚Ä¢ Location: Mumbai;\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\n‚Ä¢ Location: Chennai;\n‚Ä¢ Load: {load_East};\n‚Ä¢ Capacity: {capacity_East}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_japan(message):
    capacity, load, time_server = api_dc.japan()
    text = f'üáØüáµ Japan ºs DC status is OK:\n\n‚Ä¢ Location: Tokyo;\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_china(message):
    capacity_Shanghai, capacity_Tianjin, capacity_Guangzhou, load_Shanghai, load_Tianjin, load_Guangzhou, time_server = api_dc.china()
    text = f'üá®üá≥ China ºs DC status is OK: \n\n‚Ä¢ Location: Shanghai;\n‚Ä¢ Load: {load_Shanghai};\n‚Ä¢ Capacity: {capacity_Shanghai}.\n\n‚Ä¢ Location: Tianjin;\n‚Ä¢ Load: {load_Tianjin};\n‚Ä¢ Capacity: {capacity_Tianjin}.\n\n‚Ä¢ Location: Guangzhou;\n‚Ä¢ Load: {load_Guangzhou};\n‚Ä¢ Capacity: {capacity_Guangzhou}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_emirates(message):
    capacity, load, time_server = api_dc.emirates()
    text = f'üá¶üá™ Emirates º DC status is OK:\n\n‚Ä¢ Location: Dubai;\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_singapore(message):
    capacity, load, time_server = api_dc.singapore()
    text = f'üá∏üá¨ Singapore ºs DC status is OK:\n\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)


def dc_hong_kong(message):
    capacity, load, time_server = api_dc.hong_kong()
    text = f'üá≠üá∞ Hong Kong ºs DC status is OK:\n\n‚Ä¢ Load: {load};\n‚Ä¢ Capacity: {capacity}.\n\nLatest update on {time_server} (UTC-8, summer UTC-7).'
    bot.send_message(message.chat.id, text, reply_markup=markup_DC)
 

def back(message):
    if message.from_user.language_code == 'ru':
        markup = markup_ru
    else: markup = markup_en

    bot.send_message(message.chat.id, 'üëå', reply_markup=markup)


@bot.inline_handler(lambda query: True)
def status_inline(inline_query):
    """Inline mode"""
    try:        
        SessionsLogon, player_count, time_server = api.status()
        scheduler, online_servers, online_players, time_server, search_seconds_avg, searching_players = api.matchmaking()
        dev_player_count, time_server = api.devcount()

        try:
            if SessionsLogon == 'normal':
                if inline_query.from_user.language_code == 'ru':
                    status_r = strings.statusNormal_ru.format(player_count, time_server)
                else:    
                    status_r = strings.statusNormal_en.format(player_count, time_server)
            else:
                if inline_query.from_user.language_code == 'ru':
                    status_r = strings.statusWrong_ru.format(time_server)
                else:    
                    status_r = strings.statusWrong_en.format(time_server)

            if scheduler == 'normal':
                if inline_query.from_user.language_code == 'ru':
                    mm_r = strings.mmNormal_ru.format(online_servers, online_players, searching_players, search_seconds_avg, time_server)
                else:
                    mm_r = strings.mmNormal_en.format(online_servers, online_players, searching_players, search_seconds_avg, time_server)

            elif not scheduler == 'normal':
                if inline_query.from_user.language_code == 'ru':
                    mm_r = strings.mmWrong_ru.format(time_server)
                else:
                    mm_r = strings.mmWrong_en.format(time_server)
                    
            if inline_query.from_user.language_code == 'ru':
                    dev_r = strings.devCount_ru.format(dev_player_count, time_server)
            else:
                    dev_r = strings.devCount_en.format(dev_player_count, time_server)        
                    
            if inline_query.from_user.language_code == 'ru': 
                titleStatus = '–°—Ç–∞—Ç—É—Å'
                titleMM = '–ú–∞—Ç—á–º–µ–π–∫–∏–Ω–≥'
                titleDev = '–ë–µ—Ç–∞-–≤–µ—Ä—Å–∏—è'

                descriptionStatus = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤'
                descriptionMM = '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤'
                descriptionDev = '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤'
            else:
                titleStatus = 'Status'
                titleMM = 'Matchmaking'
                titleDev = 'Beta version'

                descriptionStatus = 'Check the availability of the servers'
                descriptionMM = 'Show the count of active players'
                descriptionDev = 'Show the count of in-game developers'

            r = types.InlineQueryResultArticle('1', titleStatus, input_message_content = types.InputTextMessageContent(status_r), description=descriptionStatus)
            r2 = types.InlineQueryResultArticle('2', titleMM, input_message_content = types.InputTextMessageContent(mm_r), description=descriptionMM)
            r3 = types.InlineQueryResultArticle('3', titleDev, input_message_content = types.InputTextMessageContent(dev_r), description=descriptionDev)

            bot.answer_inline_query(inline_query.id, [r, r2, r3], cache_time=5)
            log_inline(inline_query)
        except Exception as e:
            bot.send_message(config.OWNER, f'‚ùóÔ∏èError: {e}\n\n‚Ü©Ô∏è inline_query')
            print(e)

    except Exception as e:
        bot.send_message(me, f'‚ùóÔ∏è{e}')
        send_about_problem_valve_inline(inline_query)


@bot.message_handler(commands=['start'])
def welcome(message):
    """First bot's message"""
    log(message)
    if message.from_user.language_code == 'ru':
        text = strings.cmdStart_ru.format(message.from_user.first_name)
        markup = markup_ru
    else:
        text = strings.cmdStart_en.format(message.from_user.first_name)
        markup = markup_en

    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(commands=['feedback'])
def leave_feedback(message):
    """Send feedback"""
    log(message)

    if message.from_user.language_code == 'ru':
        text = strings.cmdFeedback_ru 
    else:
        text = strings.cmdFeedback_en
    
    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup_del)
    bot.register_next_step_handler(message, get_feedback)


def get_feedback(message):
    """Get feedback from user of bot"""
    if message.text == '/cancel':
        log(message)
        if message.from_user.language_code == 'ru':
            markup = markup_ru
        else:
            markup = markup_en
        bot.send_message(message.chat.id, 'üëç', reply_markup=markup)

    else:
        bot.send_message(config.OWNER, f'üÜî <a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>:', parse_mode='html', disable_notification=True)
        bot.forward_message(config.OWNER, message.chat.id, message.message_id)
        
        if not TEST:
            bot.send_message(config.AQ, f'üÜî <a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>:', parse_mode='html', disable_notification=True)
            bot.forward_message(config.AQ, message.chat.id, message.message_id)

        if message.from_user.language_code == 'ru':
            text = '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.'
            markup = markup_ru
        else:
            text = 'Awesome! Your message has been sent.'
            markup = markup_en

        bot.send_message(message.chat.id, text, reply_to_message_id=message.message_id,reply_markup=markup)


@bot.message_handler(commands=['help'])
def help(message):
    """/help message"""
    log(message)
    if message.from_user.language_code == 'ru':
        text = strings.cmdHelp_ru
        markup = markup_ru
    else:
        text = strings.cmdHelp_en
        markup = markup_en

    bot.send_message(message.chat.id, text, parse_mode='html', reply_markup=markup, disable_web_page_preview=True)


@bot.message_handler(content_types=['text'])
def answer(message):
    """Answer of the bot"""
    log(message)
    try:
        bot.send_chat_action(message.chat.id, 'typing')

        if message.text.lower() == 'status' or message.text.lower() == '—Å—Ç–∞—Ç—É—Å' or message.text.lower() == '/status':
            status(message)

        elif message.text.lower() == 'matchmaking' or message.text.lower() == '–º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥' or message.text.lower() == '/mm':
            matchmaking(message)
        
        elif message.text.lower() == 'online devs' or message.text.lower() == '–æ–Ω–ª–∞–π–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤' or message.text.lower() == '/devcount':
            devcount(message)
 
        elif message.text.lower() == 'timer' or message.text.lower() == '—Ç–∞–π–º–µ—Ä' or message.text.lower() == '/timer':
            timer(message)

        elif message.text.lower() == 'data centers' or message.text.lower() == '–¥–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä—ã (–∞–Ω–≥–ª.)' or message.text.lower() == '/dc':
            dc(message)

        elif message.text.lower() == 'south africa' or message.text.lower() == '—é–∂–Ω–∞—è –∞—Ñ—Ä–∏–∫–∞' or message.text.lower() == '/south_africa':
            dc_africa(message)

        elif message.text.lower() == 'australia' or message.text.lower() == '–∞–≤—Å—Ç—Ä–∞–ª–∏—è' or message.text.lower() == '/australia':
            dc_australia(message)

        elif message.text.lower() == 'europe' or message.text.lower() == '–µ–≤—Ä–æ–ø–∞' or message.text.lower() == '/europe':
            dc_europe(message)

        elif message.text.lower() == 'asia' or message.text.lower() == '–∞–∑–∏—è' or message.text.lower() == '/asia':
            dc_asia(message)

        elif message.text.lower() == 'usa' or message.text.lower() == '—Å—à–∞' or message.text.lower() == '/usa':
            dc_usa(message)

        elif message.text.lower() == 'south america' or message.text.lower() == '—é–∂–Ω–∞—è –∞–º–µ—Ä–∏–∫–∞' or message.text.lower() == '/south_america':
            dc_south_america(message)

        elif message.text.lower() == 'usa north' or message.text.lower() == '—Å–µ–≤–µ—Ä–Ω—ã–µ —Å—à–∞' or message.text.lower() == '/usa_north':
            dc_usa_north(message)

        elif message.text.lower() == 'usa south' or message.text.lower() == '—é–∂–Ω—ã–µ —Å—à–∞' or message.text.lower() == '/usa_south':
            dc_usa_south(message)

        elif message.text.lower() == 'eu north' or message.text.lower() == '—Å–µ–≤–µ—Ä–Ω–∞—è –µ–≤—Ä–æ–ø–∞' or message.text.lower() == '/eu_north':
            dc_eu_north(message)

        elif message.text.lower() == 'eu west' or message.text.lower() == '–∑–∞–ø–∞–¥–Ω–∞—è –µ–≤—Ä–æ–ø–∞' or message.text.lower() == '/eu_west':
            dc_eu_west(message)

        elif message.text.lower() == 'eu east' or message.text.lower() == '–≤–æ—Å—Ç–æ—á–Ω–∞—è –µ–≤—Ä–æ–ø–∞' or message.text.lower() == '/eu_east':
            dc_eu_east(message)

        elif message.text.lower() == 'india' or message.text.lower() == '–∏–Ω–¥–∏—è' or message.text.lower() == '/india':
            dc_india(message)
            
        elif message.text.lower() == 'japan' or message.text.lower() == '—è–ø–æ–Ω–∏—è' or message.text.lower() == '/japan':
            dc_japan(message)

        elif message.text.lower() == 'china' or message.text.lower() == '–∫–∏—Ç–∞–π' or message.text.lower() == '/china':
            dc_china(message)

        elif message.text.lower() == 'emirates' or message.text.lower() == '—ç–º–∏—Ä–∞—Ç—ã' or message.text.lower() == '/emirates':
            dc_emirates(message)

        elif message.text.lower() == 'singapore' or message.text.lower() == '—Å–∏–Ω–≥–æ–ø—É—Ä' or message.text.lower() == '/singapore':
            dc_singapore(message)

        elif message.text.lower() == 'hong kong' or message.text.lower() == '–≥–æ–Ω–∫–æ–Ω–≥' or message.text.lower() == '/hong_kong':
            dc_hong_kong(message)

        elif message.text == '‚è™ Back' or message.text == '‚è™ –ù–∞–∑–∞–¥':
            back(message)


        else:
            if message.from_user.language_code == 'ru':
                text = strings.unknownRequest_ru
                markup = markup_ru
            else: 
                text = strings.unknownRequest_en
                markup = markup_en

            bot.send_message(message.chat.id, text, reply_markup=markup)
    
    except Exception as e:
        bot.send_message(me, f'‚ùóÔ∏è{e}')

# Polling
bot.polling(True)
